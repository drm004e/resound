//   
//   Copyright (c) 2007 David Moore, James Mooney, All Rights Reserved.
//   
//   This program is free software; you can redistribute it and/or
//   modify it under the terms of the GNU General Public License as
//   published by the Free Software Foundation; either version 2 of
//   the License, or (at your option) any later version.
//   
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//   GNU General Public License for more details.
//   
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 59 Temple Place, Suite 330, Boston,
//   MA 02111-1307 USA
//   
// Class automatically generated by Dev-C++ New Class wizard

#ifndef SA_PERFORMANCE_H
#define SA_PERFORMANCE_H

#include "pvar.h"
#include "automation.h"

namespace Resound
{

/// Stores preset information for a single Parameters Lock status
/// some extra detail here
class ParameterLockPreset
{
public:
	ParameterLockPreset();
	virtual ~ParameterLockPreset();

private:
	ParameterAddress m_addr;
	int m_value;

	friend class boost::serialization::access; ///< allow serialization access at low level
	/// serialization definition
	template<class Archive>
    void serialize(Archive & ar, const unsigned int version)
    {
        ar & BOOST_SERIALIZATION_NVP(m_value);
		ar & BOOST_SERIALIZATION_NVP(m_addr);
    }
};

/// Stores the preset information for a single Master Fader
class MasterFaderPreset
{
public:
	MasterFaderPreset();
	virtual ~MasterFaderPreset();

private:
	int m_value;
	Collective m_target;

	friend class boost::serialization::access; ///< allow serialization access at low level
	/// serialization definition
	template<class Archive>
    void serialize(Archive & ar, const unsigned int version)
    {
        ar & BOOST_SERIALIZATION_NVP(m_value);
		ar & BOOST_SERIALIZATION_NVP(m_target);
    }
};

/// A single preset contained in a given performance
/// It will store: Fader Positions, Assignments, Lock status for all subsystem Parameters.
class PerformancePreset
{
public:
	// class constructor
	PerformancePreset();
	// class destructor
	virtual ~PerformancePreset();

private:
	std::vector<MasterFaderPreset> m_masterFaderPresetArray;
	std::vector<ParameterLockPreset> m_parameterLockPresetArray;

	friend class boost::serialization::access; ///< allow serialization access at low level
	/// serialization definition
	template<class Archive>
    void serialize(Archive & ar, const unsigned int version)
    {
        ar & BOOST_SERIALIZATION_NVP(m_masterFaderPresetArray);
		ar & BOOST_SERIALIZATION_NVP(m_parameterLockPresetArray);
    }
};

/// The bottom level of a saved performance file.
/// This can be considered the main document of the Resound system.
class Performance
{
public:
	// class constructor
	Performance();
	// class destructor
	virtual ~Performance();
	ParameterNamespaceManagerPtr get_parameter_global_namespace(){return m_parameterNamespaceManager;}
private:
	std::vector<PerformancePreset> m_presetArray;
	ParameterNamespaceManagerPtr m_parameterNamespaceManager;

	friend class boost::serialization::access; ///< allow serialization access at low level
	/// serialization definition
	template<class Archive>
    void serialize(Archive & ar, const unsigned int version)
    {
        ar & BOOST_SERIALIZATION_NVP(m_presetArray);
		ar & BOOST_SERIALIZATION_NVP(m_parameterNamespaceManager);
    }
};

typedef boost::shared_ptr<Performance> PerformancePtr;

/// manages the current performance
/// singleton application document
class PerformanceManager{
private:
	PerformanceManager();
	~PerformanceManager();
	static PerformanceManager* s_instance;
public:
	static PerformanceManager& get_instance();
	PerformancePtr get_performance(){ return m_activePerformance; }
	void new_performance();
	void save_performance_xml(const std::string& filepath);
	void load_performance_xml(const std::string& filepath);
private:
	PerformancePtr m_activePerformance;
};

#define RESOUND_PERFORMANCE_MANAGER() Resound::PerformanceManager::get_instance()
#define RESOUND_PERFORMANCE() Resound::PerformanceManager::get_instance().get_performance()
#define RESOUND_NAMESPACE() Resound::PerformanceManager::get_instance().get_performance()->get_parameter_global_namespace()

} // namespace Resound
#endif // SA_PERFORMANCE_H
