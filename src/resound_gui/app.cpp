//   
//   Copyright (c) 2007 David Moore, James Mooney, All Rights Reserved.
//   
//   This program is free software; you can redistribute it and/or
//   modify it under the terms of the GNU General Public License as
//   published by the Free Software Foundation; either version 2 of
//   the License, or (at your option) any later version.
//   
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//   GNU General Public License for more details.
//   
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 59 Temple Place, Suite 330, Boston,
//   MA 02111-1307 USA
//   
// Class automatically generated by Dev-C++ New Class wizard

#include "sa_cpch.h" // precompiler header

#include "sa_automation.h"
#include "sa_pvar.h"
#include "sa_behaviour.h"
#include "sa_basebehaviour.h"

// view classes
#include "sa_vumeterwidget.h"
#include "sa_faderwidget.h"
#include "sa_pvarwidgets.h"
#include "sa_masterfader.h"
#include "sa_performanceview.h"

#include "sa_comms.h"
#include "sa_amclient.h"
#include "sa_monitorview.h"

#include "sa_behaviourView.h"

#include "sa_base.h"

#include "sa_app.h" // class's header file

IMPLEMENT_APP(ResoundClientApp)

bool ResoundClientApp::OnInit()
{
	try {
		DEBUG_TRACE(_T("ResoundClientApp::OnInit"));
		MainFrame *win = new MainFrame(_T("Resound Client"), wxPoint (100, 100),wxSize(450, 340));
		win->Show(TRUE);
		SetTopWindow(win);

		return true;
	} catch(std::exception& e) {
		wxMessageBox(wxString(e.what(), *wxConvCurrent),_T("Unhandled Exception"));
		SA::SYSTEM_LOG_STREAM() << _T("! Unhandled std::exception: ") << wxString(e.what(), *wxConvCurrent) << _T("\n");
	} catch(...) {
		wxMessageBox(_T("Resound has encountered an unexpected exception\nand has been forced to shutdown."),_T("Unhandled Exception"));
		SA::SYSTEM_LOG_STREAM() << _T("! Unhandled unknown exception\n");
	}
	return false;
}

int ResoundClientApp::OnRun()
{
	try {
		wxApp::OnRun();
	} catch(std::exception& e) {
		wxMessageBox(wxString(e.what(), *wxConvCurrent),_T("Unhandled Exception"));
		SA::SYSTEM_LOG_STREAM() << _T("! Unhandled std::exception: ") << wxString(e.what(), *wxConvCurrent) << _T("\n");
	} catch(...) {
		wxMessageBox(_T("Resound has encountered an unexpected exception\nand has been forced to shutdown."),_T("Unhandled Exception"));
		SA::SYSTEM_LOG_STREAM() << _T("! Unhandled unknown exception\n");
	}
}

int ResoundClientApp::OnExit()
{
	SA::AutomationManager::Destroy();
	SA::SystemLog::Destroy();
	return wxApp::OnExit();
}

void ResoundClientApp::OnUnhandledException()
{
}



void ResoundClientApp::RebuildGUI()
{
	((MainFrame*)GetTopWindow())->RebuildGUI();
}
