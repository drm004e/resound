//   
//   Copyright (c) 2007 David Moore, James Mooney, All Rights Reserved.
//   
//   This program is free software; you can redistribute it and/or
//   modify it under the terms of the GNU General Public License as
//   published by the Free Software Foundation; either version 2 of
//   the License, or (at your option) any later version.
//   
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//   GNU General Public License for more details.
//   
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 59 Temple Place, Suite 330, Boston,
//   MA 02111-1307 USA
//   
// Class automatically generated by Dev-C++ New Class wizard

#ifndef SA_PVARWIDGETS_H
#define SA_PVARWIDGETS_H

#include "vumeterwidget.h"
#include "faderwidget.h"

namespace SA
{


// ParameterAddressWidgetBase is a base class for gui objects that are linked to a ParameterAddresses
// aimed at use in sub system guis
class ParameterAddressWidgetBase : public wxWindow
{
public:
	ParameterAddressWidgetBase(wxWindow* parent, int id, ParameterAddress _addr);
	virtual ~ParameterAddressWidgetBase();

	ParameterAddress GetAddress();
protected:
	ParameterAddress addr;
};

// panel classes for creating sub system interfaces
// base classes act lik wxPanels but with extra defined functions
class PVSSettingsPanel : public wxPanel
{
public:
	PVSSettingsPanel(wxWindow* parent, ParameterNamespace* _subSystem, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(300,200), long style = wxTAB_TRAVERSAL, const wxString& name = _("panel"));
protected:
	ParameterNamespace *subSystem;
};
class PVSSelectPanel : public wxPanel
{
public:
	PVSSelectPanel(wxWindow* parent, ParameterNamespace* _subSystem, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(300,200), long style = wxTAB_TRAVERSAL, const wxString& name = _("panel"));
protected:
	ParameterNamespace *subSystem;
};

// -------------------------------------- Collective Widget --------------------------------------------------
enum CollectiveWidget_ID
{
    PVLW_LABEL = 1,
    PVLW_ASSIGN,
    PVLW_TARGET,
    PVLW_CM_MONITOR, // (CH = context help)
    PVLW_CM_EDIT,
    PVLW_CM_DISPLAY,
    PVLW_CM_UNASSIGN
};
class CollectiveWidget : public wxPanel
{
public:
	CollectiveWidget(wxWindow* parent, int id, wxString _name, Collective* _collective,
	                 bool _showMeters = false, int _maxMeters = 0);
	void SetCollective(Collective* _coll);
	void UpdateLink(); // update the link
private:
	std::vector<ParameterVUMeterWidget*> pVarVUMeterWidgetArray;
	wxBoxSizer *topSizer;
	wxBoxSizer *meterSizer;

	void Assign(); // the actual assign function
	void OnAssign(wxCommandEvent &event); // triggers call to Assign()

	// context menu event handling function
	void OnContextMenu(wxContextMenuEvent &event);
	// functions for handling events from each of the context menu items
	void OnContextMonitor(wxCommandEvent &event);
	void OnContextEdit(wxCommandEvent &event); // triggers call to Assign()
	void OnContextDisplay(wxCommandEvent &event);
	void OnContextUnassign(wxCommandEvent &event);

	bool showMeters; // if shoiwing meters collective set0 is display with active vu controls
	wxString name; // name of this widget
	wxStaticText* targetLabel; // label showing current target
	Collective* collective; // the link associated
	int maxMeters;
	DECLARE_EVENT_TABLE()
};

// ----------------------------------- gui CollectiveEditor : wxPanel -------------------------------------

class CollectiveBuilder; // pre-declaration

class CollectiveEditor : public wxPanel
{
public:
	CollectiveEditor(CollectiveBuilder* _parent, int id, CollectiveCursorEdit* _collectiveWrapper);
	~CollectiveEditor();

	// update function - returns pointer to a sizer with the collective visualisation in it...
	void UpdateFromCollective();

	CollectiveBuilder* parent;
	CollectiveCursorEdit* collectiveWrapper;

	//wxBoxSizer* topSizer;
	wxStaticBoxSizer* topSizer;

private:
	wxScrolledWindow* scWin;
};

// ----------------------------------- CollectiveElementWidget -------------------------------------------

DECLARE_EVENT_TYPE(saEVT_ELEMENT_SELECT, -1) // id (-1) is not actually used any more according to the help file

class CollectiveElementWidget : public wxWindow
{
public:
	enum CEW_CM /// Enumed list defining collective element interactions
	{
	    CEW_CM_LEFT_CLICK, // left click moves the cursor to that element
	    CEW_CM_SHIFT_LEFT, // shift left (context menu) shifts the element to the left in the collective
	    CEW_CM_SHIFT_RIGHT, // shift right (context menu) shifts the element to the right in the collective
	    CEW_CM_UNASSIGN, // unassign removes all of the ParameterLinks from that element but keeps the element
	    CEW_CM_REMOVE // remove gets rid of the element and all its nested ParameterLinks
	};
	CollectiveElementWidget(wxWindow* parent, int id, bool highlight = false);
	~CollectiveElementWidget();
	void SendElementSelectedEvent(CEW_CM action); // function to send custom event.

private:
	// event handlers
	void OnLeftMouseUp(wxMouseEvent& event);
	void OnContextMenu(wxContextMenuEvent &event);
	void OnContextShiftLeft(wxCommandEvent& event);
	void OnContextShiftRight(wxCommandEvent& event);
	void OnContextUnassign(wxCommandEvent& event);
	void OnContextRemove(wxCommandEvent& event);

	DECLARE_EVENT_TABLE()
};

// ----------------------------------- CollectiveLinkWidget -------------------------------------------

class CollectiveLinkWidget : public wxWindow
{
public:
	CollectiveLinkWidget(wxWindow* parent, int id, wxString linkName);
	~CollectiveLinkWidget();

private:
	// event handlers
	void OnLeftMouseUp(wxMouseEvent& event);

	DECLARE_EVENT_TABLE()
};

// ----------------------------------- CBDialog ----------------------------------------------------------
class CBDialog : public wxDialog
{
public:
	CBDialog(wxWindow* parent, Collective* _collective);
};

// ----------------------------------- gui CollectiveBuilder : Dialog -------------------------------------

enum CBID
{
    CBID_ADD = 1,
    CBID_CLEAR
};

class CollectiveBuilder : public wxPanel
{
public:
	CollectiveBuilder(wxWindow* parent, Collective* _collective);
	std::vector<ParameterAddress> selection;

private:
	// event handlers
	void OnClearSelection(wxCommandEvent &event);
	void OnAddToPalette(wxCommandEvent &event);
	void OnAddressSelected(wxCommandEvent &event);
	void OnElementSelected(wxCommandEvent &event);

	Collective* collective; // the collective being edited
	CollectiveCursorEdit* collectiveWrapper; // The wrapper for the collective being edited
	CollectiveEditor* collectiveEditor; // the collective editor window

	DECLARE_EVENT_TABLE()
};

// ------------------------------------------- Address Select Widget -----------------------------------------

DECLARE_EVENT_TYPE(saEVT_PVARADDRESS_SELECT, -1) // this class can trigger a custom event type
// respond macro - EVT_COMMAND  (ID_MY_WINDOW, saEVT_PVARADDRESS_SELECT, MyFrame::OnMyEvent)
// respond range macro - EVT_COMMAND_RANGE  (ID_Lower, ID_Upper, saEVT_PVARADDRESS_SELECT, MyFrame::OnMyEvent)
// address selection widget
class AddressSelectWidget : public ParameterAddressWidgetBase
{

public:
	enum AS_MOUSE_ACTION
	{
	    AS_LEFT_CLICK,
	    AS_RIGHT_CLICK
	};
	AddressSelectWidget(wxWindow* parent, int id, ParameterAddress _addr);
	void SendAddressSelectEvent(AS_MOUSE_ACTION mouseAction);
	void SetSelected(bool b);
private:
	wxString name;
	wxColour oldColour;
	bool selected;

	// event handlers
	void OnLeftMouseUp(wxMouseEvent& event);
	void OnRightMouseUp(wxMouseEvent& event);
	void OnPaint(wxPaintEvent& event);
	DECLARE_EVENT_TABLE()
};

}

#endif // SA_PVARWIDGETS_H
