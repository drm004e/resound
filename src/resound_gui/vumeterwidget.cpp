//   
//   Copyright (c) 2007 David Moore, James Mooney, All Rights Reserved.
//   
//   This program is free software; you can redistribute it and/or
//   modify it under the terms of the GNU General Public License as
//   published by the Free Software Foundation; either version 2 of
//   the License, or (at your option) any later version.
//   
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//   GNU General Public License for more details.
//   
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 59 Temple Place, Suite 330, Boston,
//   MA 02111-1307 USA
//   
// Class automatically generated by Dev-C++ New Class wizard
#include "pch.h" // precompiler header

#include "util.h"
#include "automation.h"
#include "pvar.h"
#include "vumeterwidget.h" // class's header file

// event table
BEGIN_EVENT_TABLE(SA::StaticVUMeterWidget, wxControl)
EVT_PAINT(SA::StaticVUMeterWidget::OnPaint)
END_EVENT_TABLE()

// class constructor
SA::StaticVUMeterWidget::StaticVUMeterWidget(wxWindow *parent,int id,int _val, int _min, int _max, wxString offFilename, wxString onFilename)
		: wxControl(parent, id,wxPoint(0,0), wxSize(0,0))
{
	SetWindowStyle(wxCLIP_CHILDREN);
	// insert your code here
	bmMeterOff.LoadFile(offFilename,wxBITMAP_TYPE_BMP);
	bmMeterOn.LoadFile(onFilename,wxBITMAP_TYPE_BMP);
	dcMeterOff.SelectObject(bmMeterOff);
	dcMeterOn.SelectObject(bmMeterOn);

	sizeX = bmMeterOff.GetWidth();
	sizeY = bmMeterOff.GetHeight();

	SetWindowStyleFlag(wxNO_BORDER);
	wxSize size(sizeX,sizeY);
	SetSize(size);
	SetMinSize(size);
	SetMaxSize(size);

	val = min = 0;
	max = 128;

	// set defaults
	SetValue(_val);
	SetRange(_min,_max);
}

// class destructor
SA::StaticVUMeterWidget::~StaticVUMeterWidget()
{
	// insert your code here
}

// paint handling
void SA::StaticVUMeterWidget::OnPaint(wxPaintEvent& event)
{
	wxPaintDC dc(this);

	// range adjust for val
	int y = RANGEMAP(val,min,max,0,sizeY);

	// blit off portion // top bit
	dc.Blit(wxPoint(0,0),wxSize(sizeX,sizeY - y),&dcMeterOff,wxPoint(0,0));
	// blit on portion // bottom bit
	dc.Blit(wxPoint(0,sizeY - y),wxSize(sizeX,y),&dcMeterOn,wxPoint(0,sizeY - y));
}

// settings
void SA::StaticVUMeterWidget::SetValue(int _val)
{
	if(val != _val) {
		val = _val;
		Refresh(false);
	}
};
void SA::StaticVUMeterWidget::SetRange(int _min, int _max)
{
	if(_min < _max) {
		min = _min;
		max = _max;
		Refresh(false);
	}
};

// --------------------------------- Automated vu meter ----------------------
// class constructor
SA::VUMeterWidget::VUMeterWidget(wxWindow *parent,int id,int _val, int _min, int _max, wxString offFilename, wxString onFilename)
		: StaticVUMeterWidget(parent, id,_val,_min,_max,offFilename,onFilename)
{}
// time elapsed function for decay and peak hold extension
void SA::VUMeterWidget::Tick(float dT)
{
	if(val > 0) {
		float v = val;
		v *= 0.95f;
		val = (int)v;
		Refresh(false);
	}
}
// --------------------------------- PVar  vu meter ----------------------
// class constructor
SA::PVarVUMeterWidget::PVarVUMeterWidget(wxWindow *parent,int id,int _val, int _min, int _max, wxString offFilename, wxString onFilename)
		: StaticVUMeterWidget(parent, id,_val,_min,_max,offFilename,onFilename)
{
}
// time elapsed function for decay and peak hold extension
void SA::PVarVUMeterWidget::Tick(float dT)
{
	int v = target.GetValue();
	if(val != v) {
		val = v;
		Refresh(false);
	}
}

void SA::PVarVUMeterWidget::SetTarget(PVarAddress addr)
{
	target.SetTarget(addr);
}
