//   
//   Copyright (c) 2007 David Moore, James Mooney, All Rights Reserved.
//   
//   This program is free software; you can redistribute it and/or
//   modify it under the terms of the GNU General Public License as
//   published by the Free Software Foundation; either version 2 of
//   the License, or (at your option) any later version.
//   
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//   GNU General Public License for more details.
//   
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 59 Temple Place, Suite 330, Boston,
//   MA 02111-1307 USA
//   
// Class automatically generated by Dev-C++ New Class wizard

#ifndef SA_AUTOMATION_H
#define SA_AUTOMATION_H

// Automation manager singleton class

namespace SA
{

class AutomatedObject; // pre declare

class AutomationManager : public wxTimer
{
public:
	static AutomationManager& GetSingleton();
	static void Destroy();

	void AddAutomatedObject(AutomatedObject* object); // add object
	void RemoveAutomatedObject(AutomatedObject* object); // remove object
	void Tick(); // master tick function

private:
	static AutomationManager* singleton;
	AutomationManager(); // private constructor/destuctor because its a singleton
	~AutomationManager();

	// timer callback may operate in own thread - CAREFULL
	// timer accuracy is not garanteed to anything usefull so use stopwatch - attached to proc
	// may need to do this platform dependent
	virtual void Notify();

	wxStopWatch clock;

	std::list<AutomatedObject*> automatedList;
};

// workhorse automation object should be inherited to register automotive effects
class AutomatedObject
{
public:
	AutomatedObject();
	virtual ~AutomatedObject();

	virtual void Tick(float dT) = 0; // pure abstract function for automation events

};

}
#endif // SA_AUTOMATION_H
