//   
//   Copyright (c) 2007 David Moore, James Mooney, All Rights Reserved.
//   
//   This program is free software; you can redistribute it and/or
//   modify it under the terms of the GNU General Public License as
//   published by the Free Software Foundation; either version 2 of
//   the License, or (at your option) any later version.
//   
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//   GNU General Public License for more details.
//   
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 59 Temple Place, Suite 330, Boston,
//   MA 02111-1307 USA
//   
// Class automatically generated by Dev-C++ New Class wizard

#ifndef __BASEBEHAVIOUR_H
#define __BASEBEHAVIOUR_H

// A selection of basic beahviours
namespace Resound
{

// function to register the behaviours in this file
void register_base_behaviours(BehaviourManager* theManager);

// basic group behaviour
// uses first set of collective
class BPGroup : public Behaviour
{
public:
	static BehaviourPtr Factory()
	{
		return BehaviourPtr(new BPGroup("pgroup"));
	};
	// class constructor
	BPGroup(std::string name);
	// class destructor
	~BPGroup();
};

// multi cross fade
// uses first set of collective
class BMultiCrossfade : public Behaviour
{
public:
	static BehaviourPtr Factory()
	{
		return BehaviourPtr(new BMultiCrossfade("mp_crossfade"));
	};
	// class constructor
	BMultiCrossfade(std::string name);
	// class destructor
	~BMultiCrossfade();

	void on_parameter_changed();
private:
	ParameterPtr m_amp;
	ParameterPtr m_pos;
};

// wave behaviour
class BWave : public Behaviour, public AutomatedObject
{
public:
	static BehaviourPtr Factory()
	{
		return BehaviourPtr(new BWave("wave"));
	};
	// class constructor
	BWave(std::string name);
	// class destructor
	~BWave();

	// overloaded
	virtual void tick(float dT);

private:
	float angle;
	ParameterPtr m_amp;
	ParameterPtr m_freq;

};

// wave behaviour
class BMexicanWave : public Behaviour, public AutomatedObject
{
public:
	static BehaviourPtr Factory()
	{
		return BehaviourPtr(new BMexicanWave("mexican_wave"));
	};
	// class constructor
	BMexicanWave(std::string name);
	// class destructor
	~BMexicanWave();

	// overloaded
	virtual void tick(float dT);

private:
	float angle;
	ParameterPtr m_amp;
	ParameterPtr m_freq;

};

// wave behaviour
class BRandom : public Behaviour, public AutomatedObject
{
	ParameterPtr m_amp;
	ParameterPtr m_freq;
public:
	static BehaviourPtr Factory()
	{
		return BehaviourPtr(new BRandom("random"));
	};
	// class constructor
	BRandom(std::string name);
	// class destructor
	~BRandom();

	// overloaded
	virtual void tick(float dT);
};

}
#endif // __BASEBEHAVIOUR_H
